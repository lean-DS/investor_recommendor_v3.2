# -*- coding: utf-8 -*-
"""portfolio_recommender_v3.2_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X0sa8MZ2lSik2uPFsYn0Irr-s24i1dJ_
"""

# app.py â€” Cloud Run (reads from GCS)
# app.py â€” Cloud Run (reads from GCS)

import os
import time
import numpy as np
import pandas as pd
import streamlit as st

# =========================
# CONFIG: point to your GCS bucket/prefix
# =========================
BUCKET = os.environ.get("GCS_DATA_BUCKET", "fintech-inv-recomm-portfolio-data")
BASE   = os.environ.get("GCS_BASE_PREFIX", "portfolio_data")

def gcs_path(*parts) -> str:
    """Compose a gs:// path inside BUCKET/BASE."""
    sub = "/".join(str(p).strip("/\\") for p in parts)
    return f"gs://{BUCKET}/{BASE}/{sub}"

# Equity features & prices (by index)
FEATURE_PATHS = {
    "sp500":  {
        "features": gcs_path("sp500",  "sp500_features_full.parquet"),
        "prices":   gcs_path("sp500",  "sp500_prices.parquet"),
    },
    "ftse100": {
        "features": gcs_path("ftse100","ftse100_features_full.parquet"),
        "prices":   gcs_path("ftse100","ftse100_prices.parquet"),
    },
    "ftse250": {
        "features": gcs_path("ftse250","ftse250_features_full.parquet"),
        "prices":   gcs_path("ftse250","ftse250_prices.parquet"),
    },
}
# ETFs
ETF_FEATURES = gcs_path("etf", "etf_features.parquet")
ETF_PRICES   = gcs_path("etf", "etf_prices.parquet")

# Sentiment cache
SENT_CACHE   = gcs_path("meta", "sentiment_sample.parquet")

# =========================
# Helpers
# =========================
def zscore(s):
    s = pd.Series(s).astype(float)
    return (s - s.mean()) / (s.std(ddof=0) + 1e-9)

def rotating_status(messages, delay=0.8):
    i = 0
    while True:
        yield messages[i % len(messages)]
        i += 1
        time.sleep(delay)

def alpha_from_horizon(hz: str) -> float:
    if hz == "< 3 years":   return 0.75
    elif hz == "3â€“5 years": return 0.85
    else:                   return 0.90

def friendly_cols(df: pd.DataFrame) -> pd.DataFrame:
    rename_map = {
        "Mom_6M": "6M Return",
        "Mom_12M": "12M Return",
        "Dividend_Yield_TTM": "Dividend Yield",
        "final_score": "Score",
        "sentiment_z": "Sentiment",
        "Beta_vs_Benchmark": "Beta",
    }
    return df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})

def equity_target_share_from_age(age: int) -> float:
    return float(max(0.2, min(0.9, (100 - age) / 100.0)))

# =========================
# Loaders (read directly from gs://â€¦)
# =========================
def _read_parquet_or_fail(uri: str, label: str) -> pd.DataFrame:
    try:
        return pd.read_parquet(uri)
    except Exception as e:
        st.error(
            f"Missing or unreadable data file for **{label}**:\n"
            f"`{uri}`\n\n"
            f"Bucket: `{BUCKET}`, Base prefix: `{BASE}`.\n\n"
            f"{e}"
        )
        st.stop()

@st.cache_data(show_spinner=False)
def _load_equity_features(which: str) -> pd.DataFrame:
    uri = FEATURE_PATHS[which]["features"]
    df = _read_parquet_or_fail(uri, f"{which.upper()} features").copy()
    df.rename(columns={"Ticker": "ticker"}, inplace=True)
    for c in ["Mom_6M", "Mom_12M", "Vol_252d", "Dividend_Yield_TTM", "AvgVol_60d"]:
        if c not in df.columns: df[c] = np.nan
    if "Beta_vs_Benchmark" not in df.columns and "Beta_vs_SPY" in df.columns:
        df.rename(columns={"Beta_vs_SPY": "Beta_vs_Benchmark"}, inplace=True)
    if "Beta_vs_Benchmark" not in df.columns:
        df["Beta_vs_Benchmark"] = np.nan
    df["asset_type"] = "Equity"
    return df

@st.cache_data(show_spinner=False)
def _load_equity_prices(which: str) -> pd.DataFrame:
    uri = FEATURE_PATHS[which]["prices"]
    px = _read_parquet_or_fail(uri, f"{which.upper()} prices").copy()
    px["Date"] = pd.to_datetime(px["Date"])
    return px[["Date","Ticker","Close"]]

@st.cache_data(show_spinner=False)
def load_universe(index_choice: str):
    if index_choice == "all":
        eq = pd.concat(
            [_load_equity_features("sp500"),
             _load_equity_features("ftse100"),
             _load_equity_features("ftse250")],
            ignore_index=True
        ).drop_duplicates("ticker")
    else:
        eq = _load_equity_features(index_choice)

    etf = _read_parquet_or_fail(ETF_FEATURES, "ETF features").copy()
    etf.rename(columns={"Ticker": "ticker"}, inplace=True)
    for c in ["Mom_6M", "Mom_12M", "Vol_252d", "Dividend_Yield_TTM", "AvgVol_60d"]:
        if c not in etf.columns: etf[c] = np.nan
    if "Beta_vs_Benchmark" not in etf.columns and "Beta_vs_SPY" in etf.columns:
        etf.rename(columns={"Beta_vs_SPY": "Beta_vs_Benchmark"}, inplace=True)
    if "Beta_vs_Benchmark" not in etf.columns:
        etf["Beta_vs_Benchmark"] = np.nan
    etf["asset_type"] = "ETF"
    return eq, etf

@st.cache_data(show_spinner=False)
def load_prices(index_choice: str, include_etf: bool=True) -> pd.DataFrame:
    if index_choice == "all":
        px_eq = pd.concat(
            [_load_equity_prices("sp500"),
             _load_equity_prices("ftse100"),
             _load_equity_prices("ftse250")],
            ignore_index=True
        )
    else:
        px_eq = _load_equity_prices(index_choice)

    if include_etf:
        px_etf = _read_parquet_or_fail(ETF_PRICES, "ETF prices").copy()
        px_etf["Date"] = pd.to_datetime(px_etf["Date"])
        px_etf = px_etf[["Date","Ticker","Close"]]
        return pd.concat([px_eq, px_etf], ignore_index=True)
    return px_eq

@st.cache_data(show_spinner=False)
def load_sentiment():
    try:
        s = pd.read_parquet(SENT_CACHE).copy()
    except Exception:
        return pd.DataFrame(columns=["ticker","sentiment_z"])
    cand = [c for c in s.columns if "sentiment" in c.lower() or "score" in c.lower()]
    score_col = cand[0] if cand else s.columns[-1]
    s = s.rename(columns={score_col: "sentiment"})
    s["ticker"] = s["ticker"].str.upper()
    s = s.groupby("ticker", as_index=False)["sentiment"].mean()
    s["sentiment_z"] = zscore(s["sentiment"])
    return s[["ticker","sentiment_z"]]

# =========================
# Scoring & filtering
# =========================
def beta_band(risk):
    if risk == "Conservative": return (0.0, 0.8)
    if risk == "Moderate":     return (0.8, 1.4)
    return (1.4, 3.0)

def build_feature_score(df, goal):
    mom = zscore(df["Mom_6M"]).fillna(0)*0.6 + zscore(df["Mom_12M"]).fillna(0)*0.4
    div = zscore(df["Dividend_Yield_TTM"]).fillna(0)
    vol = -zscore(df["Vol_252d"]).fillna(0)
    if goal == "Capital Growth":
        return 0.60*mom + 0.30*vol + 0.10*div
    elif goal == "Dividend Income":
        return 0.50*div + 0.35*vol + 0.15*mom
    return 0.45*mom + 0.35*vol + 0.20*div

def filter_candidates(eq, etf, risk, goal, top_equities=40, top_etfs=10):
    lo, hi = beta_band(risk)
    eqc = eq[(eq["Beta_vs_Benchmark"].between(lo, hi, inclusive="both")) &
             (eq["AvgVol_60d"].fillna(0) > 200_000)].copy()
    eqc["feature_score"] = build_feature_score(eqc, goal)
    eqc = eqc.sort_values("feature_score", ascending=False).head(top_equities)

    etf_sel = etf[etf["AvgVol_60d"].fillna(0) > 50_000].copy()
    etf_sel["feature_score"] = build_feature_score(etf_sel, goal)
    etf_sel = etf_sel.sort_values("feature_score", ascending=False).head(top_etfs)
    return eqc, etf_sel

def blend_with_sentiment(df, sent, alpha: float):
    out = df.merge(sent, how="left", on="ticker")
    out["sentiment_z"] = out["sentiment_z"].fillna(0.0)
    out["feature_z"] = zscore(out["feature_score"])
    out["final_score"] = alpha*out["feature_z"] + (1-alpha)*out["sentiment_z"]
    return out.sort_values("final_score", ascending=False)

# =========================
# Simple MPT (max Sharpe, long-only)
# =========================
def max_sharpe_longonly(returns_df, rf=0.015, max_w=0.10, n_iter=6000, seed=42):
    rng = np.random.default_rng(seed)
    X = returns_df.fillna(0).to_numpy()
    mu = X.mean(axis=0) * 252.0
    cov = np.cov(X, rowvar=False) * 252.0

    best = (None, -1e9)
    n = X.shape[1]
    for _ in range(n_iter):
        w = rng.random(n); w = w / w.sum()
        if (w > max_w).any():
            over = (w - max_w).clip(min=0); w -= over; w = w / w.sum()
        vol = float(np.sqrt(max(w @ cov @ w, 1e-12)))
        sh  = (float(w @ mu) - rf) / (vol + 1e-9)
        if sh > best[1]: best = (w, sh)
    return best[0], mu, cov

def rescale_group_weights(weights: pd.Series, group: pd.Series, target_share: float) -> pd.Series:
    w = weights.copy()
    is_equity = (group == "Equity"); is_etf = (group == "ETF")
    w_e = w[is_equity].sum(); w_b = w[is_etf].sum()
    if w_e > 1e-9: w.loc[is_equity] *= (target_share / w_e)
    if w_b > 1e-9: w.loc[is_etf]    *= ((1.0 - target_share) / w_b)
    return w / w.sum()

# =========================
# UI
# =========================
st.set_page_config(page_title="Personalized Portfolio", page_icon="ðŸ“ˆ", layout="wide")
st.title("ðŸ“ˆ Personalized Portfolio Builder")

with st.sidebar:
    st.header("Your Preferences")
    index_choice = st.selectbox("Universe", ["SP500", "FTSE100", "FTSE250", "All"], index=0)
    age = st.slider("Age", 18, 80, 32)
    horizon = st.selectbox("Investment Horizon", ["< 3 years", "3â€“5 years", "â‰¥ 5 years"], index=1)
    risk = st.selectbox("Risk Appetite", ["Conservative", "Moderate", "Aggressive"], index=1)
    goal = st.selectbox("Primary Goal", ["Capital Growth", "Dividend Income", "Balanced"], index=0)
    include_etf = st.toggle("Include ETFs (recommended)", value=True)
    amount = st.number_input("Investment Amount (USD)", min_value=1000.0, value=10000.0, step=500.0)
    st.caption("ETFs help neutralize risk; we include a default top-10 sleeve.")

if st.button("Build my portfolio"):
    spinner = st.empty()
    msgs = [
        "Weâ€™re creating your personalized portfolioâ€¦",
        "BERT is scoring recent news ðŸ™‚",
        "Hang on! Almost thereâ€¦",
        "Crunching features and risk filtersâ€¦",
    ]
    rot = rotating_status(msgs, delay=0.9)

    spinner.info(next(rot))
    idx = {"SP500": "sp500", "FTSE100": "ftse100", "FTSE250": "ftse250", "All": "all"}[index_choice]
    eq, etf = load_universe(idx); sent = load_sentiment(); px = load_prices(idx, include_etf=include_etf)

    spinner.info(next(rot))
    eq_40, etf_10 = filter_candidates(eq, etf, risk, goal, top_equities=40, top_etfs=(10 if include_etf else 0))

    spinner.info(next(rot))
    alpha = alpha_from_horizon(horizon)
    cand = pd.concat([eq_40, etf_10], ignore_index=True)
    blended = blend_with_sentiment(cand, sent, alpha=alpha)

    spinner.info(next(rot))
    use_tickers = blended["ticker"].tolist()
    mat = (px.query("Ticker in @use_tickers")[["Date","Ticker","Close"]]
             .pivot(index="Date", columns="Ticker", values="Close")
             .sort_index().pct_change().dropna(how="all"))
    mat = mat.dropna(axis=1, thresh=int(0.6*len(mat)))
    keep = [t for t in blended["ticker"] if t in mat.columns]
    blended = blended[blended["ticker"].isin(keep)].reset_index(drop=True)
    mat = mat[keep]

    spinner.info("Optimizing weights (MPT)â€¦")
    if mat.shape[1] < 5:
        st.warning("Too few instruments after filtering/price alignment."); st.stop()
    w0, mu, cov = max_sharpe_longonly(mat, rf=0.015, max_w=0.10, n_iter=6000, seed=42)

    target_equity_share = equity_target_share_from_age(age)
    w_series = pd.Series(w0, index=mat.columns)
    types = blended.set_index("ticker")["asset_type"].reindex(mat.columns).fillna("Equity")
    w_adj = rescale_group_weights(w_series, types, target_share=target_equity_share)

    res = blended.set_index("ticker").loc[mat.columns].reset_index()
    res["weight"] = w_adj.values
    res["alloc_$"] = (res["weight"] * amount).round(2)
    res["Beta_contrib"] = res["weight"] * res["Beta_vs_Benchmark"].fillna(1.0)
    port_beta = float(res["Beta_contrib"].sum())

    spinner.success("Portfolio ready!")
    eq_n = int((res["asset_type"] == "Equity").sum())
    etf_n = int((res["asset_type"] == "ETF").sum())
    st.subheader(f"Summary: {eq_n} Equities, {etf_n} ETFs Â· Target Equity Share â‰ˆ {target_equity_share:.0%} Â· Portfolio Beta â‰ˆ {port_beta:.2f}")

    show_cols = ["ticker","asset_type","weight","alloc_$","Beta_vs_Benchmark","Mom_6M","Mom_12M","Dividend_Yield_TTM","sentiment_z","final_score"]
    present = [c for c in show_cols if c in res.columns]
    pretty = friendly_cols(res[present])
    st.dataframe(
        pretty.style.format({
            "weight":"{:.2%}","alloc_$":"${:,.0f}","Beta":"{:.2f}",
            "6M Return":"{:.2%}","12M Return":"{:.2%}",
            "Dividend Yield":"{:.2%}","Sentiment":"{:.2f}","Score":"{:.2f}",
        }),
        use_container_width=True
    )
    st.caption("Notes: long-only; per-name cap 10%; equity/ETF split uses (100 âˆ’ age) rule; Î² shown is Beta_vs_Benchmark from your feature tables.")
