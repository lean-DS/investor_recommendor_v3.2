# -*- coding: utf-8 -*-
"""portfolio_recommender_v3.2_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X0sa8MZ2lSik2uPFsYn0Irr-s24i1dJ_
"""

# app.py
# Streamlit Personalized Portfolio Builder

import os
import time
import numpy as np
import pandas as pd
import streamlit as st

# GCS access via gcsfs
import gcsfs

# --- CONFIG: GCS bucket/prefix ---
BUCKET = os.getenv("GCS_DATA_BUCKET", "fintech-inv-recomm-portfolio-data")
PREFIX = os.getenv("GCS_BASE_PREFIX", "portfolio_data")

def gcs_path(*parts):
    return f"gs://{BUCKET}/{PREFIX}/" + "/".join(parts)

# --------- small helpers ----------
def zscore(s):
    s = pd.Series(s).astype(float)
    return (s - s.mean()) / (s.std(ddof=0) + 1e-9)

def bounded(x, lo=0.0, hi=1.0):
    return np.clip(x, lo, hi)

def rotating_status(messages, delay=0.8):
    i = 0
    while True:
        yield messages[i % len(messages)]
        i += 1
        time.sleep(delay)

# --------- load data ----------
@st.cache_data(show_spinner=False)
def load_universe(index_choice):
    features = pd.read_parquet(gcs_path(index_choice, f"{index_choice}_features_full.parquet"))
    prices = pd.read_parquet(gcs_path(index_choice, f"{index_choice}_prices.parquet"))
    features.rename(columns={"Ticker":"ticker"}, inplace=True)
    prices["Date"] = pd.to_datetime(prices["Date"])
    return features, prices

@st.cache_data(show_spinner=False)
def load_etfs():
    df = pd.read_parquet(gcs_path("etf", "etf_features.parquet"))
    df.rename(columns={"Ticker":"ticker"}, inplace=True)
    return df

@st.cache_data(show_spinner=False)
def load_sentiment(index_choice):
    try:
        s = pd.read_csv(gcs_path(index_choice, "news/latest_aggregates.csv"))
        s.rename(columns={c: c.lower() for c in s.columns}, inplace=True)
        if "ticker" not in s.columns or "sentiment" not in s.columns:
            return pd.DataFrame(columns=["ticker","sentiment_z"])
        s["ticker"] = s["ticker"].str.upper()
        s["sentiment_z"] = zscore(s["sentiment"])
        return s[["ticker","sentiment_z"]]
    except Exception:
        return pd.DataFrame(columns=["ticker","sentiment_z"])

# --------- scoring & filtering ----------
def beta_band(risk):
    if risk == "Conservative":
        return (0.0, 0.8)
    elif risk == "Moderate":
        return (0.8, 1.4)
    else:
        return (1.4, 2.5)

def build_feature_score(df, goal):
    mom = zscore(df["Mom_6M"]).fillna(0)*0.6 + zscore(df["Mom_12M"]).fillna(0)*0.4
    div = zscore(df["Dividend_Yield_TTM"]).fillna(0)
    vol = -zscore(df["Vol_252d"]).fillna(0)
    if goal == "Capital Growth":
        score = 0.55*mom + 0.35*vol + 0.10*div
    elif goal == "Dividend Income":
        score = 0.50*div + 0.35*vol + 0.15*mom
    else:
        score = 0.40*mom + 0.40*vol + 0.20*div
    return score

def filter_candidates(eq, risk, goal, top_equities=40):
    lo, hi = beta_band(risk)
    eqc = eq[(eq["Beta_vs_SPY"]>=lo) & (eq["Beta_vs_SPY"]<=hi)]
    eqc = eqc[eqc["AvgVol_60d"] > 200_000]
    eqc["feature_score"] = build_feature_score(eqc, goal)
    return eqc.sort_values("feature_score", ascending=False).head(top_equities)

def filter_etfs(etf, goal, top_etfs=10):
    etf["feature_score"] = build_feature_score(
        etf.rename(columns={"Beta_vs_Benchmark":"Beta_vs_SPY"}), goal
    )
    return etf.sort_values("feature_score", ascending=False).head(top_etfs)

def blend_with_sentiment(df, sent, alpha=0.8):
    out = df.merge(sent, how="left", on="ticker")
    out["sentiment_z"] = out["sentiment_z"].fillna(0.0)
    out["feature_z"] = zscore(out["feature_score"])
    out["final_score"] = alpha*out["feature_z"] + (1-alpha)*out["sentiment_z"]
    return out.sort_values("final_score", ascending=False)

# --------- MPT optimizer ----------
def max_sharpe_longonly(returns_df, rf=0.015, max_w=0.10, n_iter=6000, seed=42):
    rng = np.random.default_rng(seed)
    X = returns_df.fillna(0).to_numpy()
    mu = X.mean(axis=0) * 252.0
    cov = np.cov(X, rowvar=False) * 252.0
    best = (None, -1e9)
    n = X.shape[1]

    for _ in range(n_iter):
        w = rng.random(n)
        w = w / w.sum()
        if (w > max_w).any():
            over = (w - max_w).clip(min=0)
            w -= over
            w = w / w.sum()
        ret = float(w @ mu)
        vol = float(np.sqrt(w @ cov @ w + 1e-12))
        sh = (ret - rf) / (vol + 1e-9)
        if sh > best[1]:
            best = (w, sh)
    return best[0], mu, cov

# --------- UI ----------
st.set_page_config(page_title="Personalized Portfolio", page_icon="ðŸ“ˆ", layout="wide")
st.title("ðŸ“ˆ Personalized Portfolio Builder")

with st.sidebar:
    st.header("Your Preferences")
    index_choice = st.selectbox("Index Universe", ["sp500","ftse100","ftse250"], index=0)
    age = st.slider("Age", 18, 80, 32)
    risk = st.selectbox("Risk Appetite", ["Conservative","Moderate","Aggressive"], index=1)
    goal = st.selectbox("Primary Goal", ["Capital Growth","Dividend Income","Balanced"], index=0)
    include_etf = st.toggle("Include ETFs", value=True)
    amount = st.number_input("Investment Amount (USD)", min_value=1000.0, value=10000.0, step=500.0)
    alpha = st.slider("Feature vs Sentiment blend (Î±)", 0.5, 1.0, 0.8, 0.05)

if st.button("Build my portfolio"):
    spinner = st.empty()
    msgs = [
        "Weâ€™re creating your personalized portfolioâ€¦",
        "BERT is currently BERT-ing ðŸ™‚",
        "Hang on! Almost thereâ€¦",
        "Looking at Google RSS for sentimentsâ€¦",
    ]
    rot = rotating_status(msgs, delay=0.9)

    spinner.info(next(rot))
    eq, prices = load_universe(index_choice)
    etf = load_etfs()
    sent = load_sentiment(index_choice)

    spinner.info(next(rot))
    eq_40 = filter_candidates(eq, risk, goal, 40)
    etf_10 = filter_etfs(etf, goal, 10) if include_etf else pd.DataFrame()

    spinner.info(next(rot))
    cand = pd.concat([eq_40, etf_10], ignore_index=True)
    blended = blend_with_sentiment(cand, sent, alpha=alpha)

    spinner.info(next(rot))
    mat = (prices.query("Ticker in @blended['ticker']")
           .pivot(index="Date", columns="Ticker", values="Close")
           .sort_index()
           .pct_change()
           .dropna(how="all"))
    mat = mat.dropna(axis=1, thresh=int(0.6*len(mat)))
    keep = [t for t in blended["ticker"] if t in mat.columns]
    blended = blended[blended["ticker"].isin(keep)].reset_index(drop=True)
    mat = mat[keep]

    spinner.info("Optimizing weights with MPTâ€¦")
    w_final, mu, cov = max_sharpe_longonly(mat)

    res = blended.copy()
    res["weight"] = w_final
    res = res.sort_values("weight", ascending=False).head(15).reset_index(drop=True)
    res["alloc_$"] = (res["weight"] * amount).round(2)

    spinner.success("Initial filteration Completed!")

    cols_show = ["ticker","weight","alloc_$","Beta_vs_SPY","Mom_6M","Mom_12M",
                 "Dividend_Yield_TTM","sentiment_z","final_score"]
    present = [c for c in cols_show if c in res.columns]
    st.dataframe(res[present].style.format({
        "weight":"{:.2%}", "alloc_$":"${:,.0f}",
        "Beta_vs_SPY":"{:.2f}", "Mom_6M":"{:.2%}", "Mom_12M":"{:.2%}",
        "Dividend_Yield_TTM":"{:.2%}", "final_score":"{:.2f}"
    }), use_container_width=True)
